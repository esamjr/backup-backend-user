"""
Django settings for backend_user project.

Generated by 'django-admin startproject' using Django 2.1.2.

"""

import os
import sys
import logging
from gramedia.common.env import EnvConfig
from .base_celery import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c6^l-8kg4!7to28mc2)#k*@9pl(90g0(q%ow1ahjd$9d6skj)r'

APP_ENV_PREFIX = os.getenv('APP_ENV_PREFIX', 'REST')
env = EnvConfig(APP_ENV_PREFIX)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
FLAG = 3
ALLOWED_HOSTS = ['*']

# Application definition

BROKER_URL = env.string('RABBIT_CONN_PASS', 'amqp://guest:guest@127.0.0.1:5672//')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'celerybeat_status',
    'pages',
    'rest_framework',
    'rest_framework.authtoken',
    'django.contrib.sites',
    'registrations',
    'user_type',
    'friend_list',
    'country',
    'region',
    'city',
    'message',
    'experiences',
    'education',
    'award',
    'certification',
    'join_company',
    'business_account',
    'business_type',
    'employee_sign',
    'history_hierarchy',
    'hierarchy',
    'contract',
    'job_contract',
    'level',
    'time_contract',
    'type_time',
    'role_type',
    'contact',
    'private',
    'email_app',
    'log_app',
    'notification',
    'file_upload',
    'OCR_Reader',
    'business_img',
    'user_img',
    'vendor_api',
    'goal',
    'goal_assignment',
    'log_created_goal',
    'type_goal',
    'review_scheduler',
    'goal_negotiation',
    'awards_BA',
    'certifications_BA',
    'recruitment',
    'interview',
    'jobfair_online',
    'test_form',
    'chatapp',
    'license_company',
    'approval_config',
    'jobdesc',
    'orderlicense',
    'warna_goal',
    'time_period',
    'KPI',
    'KPI_assign',
    'task',
    'task_assign',
    'goal_category',
    'goal_activity',
    'goal_files',
    'goal_notes',
    'goal_setting',
    'goal_pinned',
    'kpi_category',
    'task_timer',
    'task_checklist_item',
    'task_checklist_template',
    'task_tag',
    'tag',
    'milestone',
    'task_comment',
    'task_follower',
    'feeds',
    'friends',
    'group_user',
]

SITE_ID = 1

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]
ROOT_URLCONF = 'backend_user.urls'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

PROJECT_ROOT = os.path.dirname

# AUTH_USER_MODEL = 'registrations.User'

# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
# )

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.i18n',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'backend_user.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#      'ENGINE': 'django.db.backends.postgresql',
#      'HOST': '35.198.248.235',
#      'PORT': '5432',
#      'NAME': 'userdbdev',
#      'USER': 'postgres',
#      'PASSWORD': 'your_password'
#     }
# }

DATABASES = {
     'default': {
      'ENGINE': 'django.db.backends.postgresql',
      'HOST': '35.247.162.159',
      'PORT': '5432',
      'NAME': 'userprod',
      'USER': 'user',
      'PASSWORD': 'U53rDB2016'
     }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 10, }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Auth
#
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.TokenAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated', )
# }


# Email setting

DEFAULT_FROM_EMAIL = 'admin@mindzzle.com'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.mindzzle.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'admin@mindzzle.com'
EMAIL_HOST_PASSWORD = '1q2w3e4r5t6y'
EMAIL_USE_TLS = True

SECURE_CONTENT_TYPE_NOSNIFF = True

CROCODIC_API_URL = env.string('CROCODIC_API_URL', ' http://attandance.mindzzle.com/api/grab/')
CROCODIC_CREDENTIAL_TOKEN = "pbkdf2_sha256$120000$I2BCKb0Nflgy$96qeihph6v7Ibpy4st7u5WAFBIRxOUKxHB28r8NlM5U="


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

FIXTURE_DIRS = (
    os.path.join(BASE_DIR, '../../fixtures'),
)

SITE_URL = 'https://x-user.mindzzle.com/'
API_URL = 'x-user-api.mindzzle.com'
GET_LOGGER_NAME = 'rest'

ACCESS_TOKEN_EXPIRE_SECONDS = 7200  # 2 hours

# logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s][%(name)s] %(levelname)s %(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'stderr': {
            'level': 'ERROR',
            'formatter': 'verbose',
            'class':'logging.StreamHandler',
            'stream': sys.stderr,
        },
        'stdout': {
            'level': 'INFO',
            'formatter': 'verbose',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'loggers': {
        '': {
            'handlers': ['stdout'],
            'level': 'DEBUG',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
